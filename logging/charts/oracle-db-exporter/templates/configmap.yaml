apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "oracle-db-exporter.fullname" . }}-custom-metrics
  namespace: "{{ .Values.namespace }}"
  labels:
    {{- include "oracle-db-exporter.labels" . | nindent 4 }}
data:
  custom-metrics.toml: |
    [[metric]]
    context = "USER_LOGIN"
    request = "SELECT 1 as value FROM dual"
    metricsdesc = { value= "Returning always 1." }

    [[metric]]
    context = "ACCUM_LOGICAL_IO"
    metricsdesc = { value="Generic counter metric from v$sysstat." }
    request = "SELECT value FROM v$sysstat WHERE name IN ('consistent gets')"

    [[metric]]
    context = "ACCUM_PHYSICAL_IO"
    metricsdesc = { value="Generic counter metric from v$sysstat." }
    request = "SELECT value FROM v$sysstat WHERE name IN ('physical reads')"

    # [[metric]]
    # context = "ALERT_LOG"
    # metricsdesc = { status="Generic counter from sys.amm_x$dbgalertex." }
    # request = "select count(*) as status from sys.amm_x$dbgalertext where originating_timestamp > (systimestamp-24/24) and regexp_like (message_text, '(ORA-00600)')"

    [[metric]]
    context = "BLOCKED_SESSIONS"
    metricsdesc = { status="Generic counter metric from v$SESSION." }
    request = "SELECT COUNT(*) as status FROM v$SESSION WHERE status = 'ACTIVE' AND blocking_session is not NULL"

    [[metric]]
    context = "BLOCKED_SESSIONS_MAXWAITSEC"
    #labels = [ "wait_time", "status" ]
    metricsdesc = { status="Generic counter metric from v$SESSION." }
    request = "SELECT COALESCE(MAX(seconds_in_wait),0) as status FROM v$SESSION WHERE wait_time = 0 AND status = 'ACTIVE' AND blocking_session IS NOT NULL"

    [[metric]]
    context = "BLOCK_CORRUPTION"
    metricsdesc = { log="Generic counter metric from v$database_block_corruption." }
    request = "select count(*) as log from v$database_block_corruption dbc join dba_extents e on dbc.file# = e.file_id and dbc.block# between e.block_id and e.block_id+e.blocks-1"

    [[metric]]
    context = "BUFFER_CACHE_SIZE"
    metricsdesc = { bytes="The buffer cache sizes in bytes." }
    request = "SELECT BYTES/(1024*1024*1024) as bytes FROM v$sgainfo WHERE name='Buffer Cache Size'"

    [[metric]]
    context = "COMPATIBLE"
    #labels = [ "name", "value" ]
    metricsdesc = { value="Generic counter metric from v$version and v$parameter" }
    request = "SELECT COUNT(*) as value FROM v$version ver, v$parameter par WHERE ver.banner like '%Oracle Database%' AND par.name = 'compatible' AND substr(ver.banner,instr(ver.banner,'.',-1,4)-2,6) = par.value"

    [[metric]]
    context = "DATABASE_UPTIME"
    #labels = [ "DATABASE_UPTIME" ]
    request = "select (sysdate-startup_time)*24*60 as value from v$instance"
    metricsdesc = { value= "Generic counter from v$instance." }

    [[metric]]
    context = "DATA_FILE_STATUS"
    metricsdesc = { value="counter metric from cdb_data_files" }
    request = "select count(*) as value from cdb_data_files where status = 'INVALID'"

    [[metric]]
    context = "DB_ACTIVE_SESSIONS"
    metricsdesc = { status="Generic counter metric from v$session"}
    request = "SELECT COUNT(*) as status FROM v$session WHERE status='ACTIVE' AND program IN ('IFS PLSQL Gateway','IFS Middleware Server Main')"

    [[metric]]
    context = "DB_BLOCKED_SESSIONS"
    metricsdesc = { value="Generic counter metric from v$session"}
    request = "SELECT COUNT(*) as value FROM v$session WHERE blocking_session IS NOT NULL"

    [[metric]]
    context = "DB_BLOCKED_SESSIONS_120S"
    metricsdesc = { value="Generic counter metric from v$session"}
    request = "SELECT COUNT(*) as value FROM v$session WHERE blocking_session IS NOT NULL and seconds_in_wait>120"

    [[metric]]
    context = "DB_BUFFER_CACHE_SIZE"
    metricsdesc = { bytes="The buffer cache sizes in bytes"}
    request = "SELECT bytes FROM V$SGASTAT WHERE name = 'buffer_cache'"

    [[metric]]
    context = "DB_PGA_MEMORY"
    metricsdesc = { value="Generic memory space from v$pgastat"}
    request = "SELECT value FROM v$pgastat WHERE NAME='maximum PGA allocated'"

    [[metric]]
    context = "DB_SESSIONS"
    metricsdesc = { status="Generic counter metric from v$session"}
    request = "SELECT COUNT(*) as status from v$session"

    [[metric]]
    context = "DB_SHARED_POOL_SIZE"
    metricsdesc = { bytes="The shared pool sizes in bytes."}
    request = "SELECT SUM(bytes) as bytes FROM V$SGASTAT WHERE pool='shared pool'"

    [[metric]]
    context = "DEBUG_COMPILED_PACKAGES"
    #labels = [ "plsql_debug" ]
    #metricsdesc = { plsql_debug="Generic counter metric from sys.dba_plsql_object_settings"}
    request = "select count(1) as value from (select GREATEST(plsql_debug , DECODE(plsql_optimize_level, 1, 'TRUE', 'FALSE') ) AS plsql_debug from sys.dba_plsql_object_settings where owner='IFSAPP' and plsql_debug='TRUE')"
    metricsdesc = { value="Generic counter metric from sys.dba_plsql_object_settings"}

    [[metric]]
    context = "FRA_USAGE"
    #labels = [ "NO_FRA_USAGE" ]
    #metricsdesc = { value="Generic counter metric from v$recovery_file_dest"}
    request = "select case when count(*) = 0 then 0 else round((sum(space_used)/sum(space_limit))*100,0) end as value from v$recovery_file_dest"
    metricsdesc = { value="Generic counter metric from v$recovery_file_dest"}

    [[metric]]
    context = "INDEX_COST_ADJ"
    metricsdesc = { value="Generic counter metric from v$parameter"}
    request = "SELECT value FROM v$parameter WHERE name = 'optimizer_index_cost_adj'"

    [[metric]]
    context = "INVALID_BODIES"
    metricsdesc = { value="Generic counter metric from dba_objects"}
    request = "SELECT COUNT(*) as value FROM cdb_objects WHERE status = 'INVALID' and object_type = 'PACKAGE BODY' and OWNER='IFSAPP'"

    [[metric]]
    context = "INVALID_DB_OBJECTS"
    metricsdesc = { value="counter metric from cdb_objects"}
    request = "select count(*) as value from cdb_objects where owner='IFSAPP' and status='INVALID'"

    [[metric]]
    context = "INVALID_PACKAGES"
    metricsdesc = { value="counter metric from cdb_objects"}
    request = " SELECT COUNT(*) as value FROM cdb_objects WHERE status = 'INVALID' and object_type = 'PACKAGE' and OWNER='IFSAPP'"

    [[metric]]
    context = "INVALID_TRIGGERS"
    metricsdesc = { value="counter metric from cdb_objects"}
    request = "SELECT COUNT(*) as value FROM cdb_objects WHERE status = 'INVALID' and object_type = 'TRIGGER' and OWNER='IFSAPP'"

    [[metric]]
    context = "INVALID_VIEWS"
    #metricsdesc = { value="Generic counter metric from dba_objects"}
    request = "SELECT COUNT(*) as value FROM cdb_objects WHERE status = 'INVALID' and object_type = 'VIEW' and OWNER='IFSAPP'"
    metricsdesc = { value="counter metric from cdb_objects" }

    [[metric]]
    context = "MEMORY_TARGET"
    request = "SELECT value FROM v$parameter WHERE name = 'memory_target'"
    metricsdesc = { value="Generic counter from v$parameter" }

    [[metric]]
    context = "PGA_AGGREGATE_LIMIT"
    request = "SELECT value/(1024*1024) as value FROM v$parameter WHERE name = 'pga_aggregate_limit'"
    metricsdesc = { value="Generic counter from v$parameter" }

    [[metric]]
    context = "SGA_TARGET"
    request = "SELECT value FROM v$parameter  WHERE name = 'sga_target'"
    metricsdesc = { value="Generic counter from v$parameter" }

    [[metric]]
    context = "CONCURRENT_USERS"
    request = "select sessions_highwater as value from v$license"
    metricsdesc = { value="Generic counter from v$license" }

    # [[metric]]
    # context = "PEAK_SCHEDULED_ACTIVITIES"
    # request = "select count(*) as value from ifsapp.deferred_job where state_db='Posted'"
    # metricsdesc = { value="Generic counter from ifsapp.deferred_job where state_db='Posted'" }

    [[metric]]
    context = "DB_SIZE"
    request = "select sum(bytes/1024/1024) as Megabytes from cdb_data_files"
    metricsdesc = { bytes="The database sizes in Megabytes. " }
    #request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as bytes from dba_data_files"
    #metricsdesc = { bytes="The database sizes in bytes. " }

    [[metric]]
    context = "TBS_TEMP"
    request = "select round((sum(allocated_space)/sum(tablespace_size))*100) as value from cdb_temp_free_space"
    metricsdesc = { value="counter from cdb_temp_free_space" }

    [[metric]]
    context = "TBS_USERS"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'USERS'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_SYSTEM"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'SYSTEM'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_SYSAUX"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'SYSAUX'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_UNDOTBS"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) like '%UNDO%'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]] 
    context = "TBS_IFSTAS_DATA"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSTAS_DATA'"
    metricsdesc =  { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSTAS_INDEX"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSTAS_INDEX'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_REPORT_INDEX"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_REPORT_INDEX'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_REPORT_DATA"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_REPORT_DATA'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_LOB"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_LOB'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_INDEX"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_INDEX'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_DATA"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_DATA'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_ARCHIVE_INDEX"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_ARCHIVE_INDEX'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "TBS_IFSAPP_ARCHIVE_DATA"
    request = "select round(((sum(bytes)/1024/1024)/(sum(maxbytes)/1024/1024))*100) as value from cdb_data_files where upper(tablespace_name) = 'IFSAPP_ARCHIVE_DATA'"
    metricsdesc = { value="counter from cdb_data_files" }

    [[metric]]
    context = "PLUGGABLE"
    request = "SELECT sys_context('USERENV','CON_ID') as value FROM dual"
    metricsdesc = { value="Generic counter from dual" }

    [[metric]]
    context = "SIZE_UNIFIED_AUD"
    request = "select nvl(Sum(round(bytes / 1024 / 1024, 1)),0) as value from cdb_segments where owner = 'AUDSYS'"
    metricsdesc = { value="counter from cdb_segments" }

    [[metric]]
    context = "RMAN_DB_BACKUP"
    request = "Select count(1) from V$rman_backup_job_details where (EXISTS (select name from v$database)) and start_time >(systimestamp-48/24) and start_time < (systimestamp-24/24) and input_type!='ARCHIVELOG' and status='COMPLETED';"
    metricsdesc = { value="DB backup in last 48hrs with a completed status - v$rman_backup_job_details" }

    [[metric]]
    context = "RMAN_ARCHIVELOG_BACKUP"
    request = "Select count(1) from V$rman_backup_job_details where (EXISTS (select name from v$database)) and start_time >(systimestamp-24/24) and input_type ='ARCHIVELOG' and status='COMPLETED';"
    metricsdesc = { value="Archivelog backups in the last 24hr with a completed status - v$rman_backup_job_details" }

    [[metric]]
    context = "PACKAGES_BYTE_MODE"
    request = "SELECT COUNT(*) as value FROM dba_plsql_object_settings WHERE nls_length_semantics = 'BYTE' and OWNER='IFSAPP'"
    metricsdesc = { value="Generic counter from dba_plsql_object_setting" }

    [[metric]]
    context = "OPTIMIZER_FEATURES_ENABLE"
    request = "SELECT COUNT(*) as value FROM v$version ver, v$parameter par WHERE ver.banner like '%Oracle Database%' AND par.name = 'optimizer_features_enable' AND substr(banner,instr(ver.banner,'.',-1,4)-2,6)=substr(par.value,0,6)"
    metricsdesc = { value="Generic counter from v$version ver, v$parameter" }

    [[metric]]
    context = "TABLES_BYTE_MODE"
    #labels = [ "u.table_name" ]
    request = "SELECT COUNT(DISTINCT u.table_name) as value FROM cdb_Tab_Columns u WHERE data_type IN ('VARCHAR2', 'CHAR') AND char_used = 'B' AND table_name NOT LIKE 'AQ$%' AND EXISTS (SELECT 1 FROM user_tables WHERE table_name = u.TABLE_NAME AND secondary = 'N') and OWNER='IFSAPP'"
    metricsdesc = { value="counter metric from cdb_Tab_Columns."}

    [[metric]]
    context = "IFSMONITORING_LOCK_STATUS"
    metricsdesc = { status="Lock status for user IFSMONITORING"}
    request = "SELECT count(*) as status from cdb_users where username='IFSMONITORING' and account_status='LOCKED'"

    [[metric]]
    context = "STATSPACK INSTALLED"
    metricsdesc = { status="Statspack installed"}
    request = "select decode((count(1)),1,1,0) from cdb_objects where object_name like 'STATS%' and owner='PERFSTAT'"
    
    [[metric]]
    context = "PERFSTAT INVALIDS"
    metricsdesc = { status="Invalid object status for PERFSTAT"}
    request = "select decode((count(1)),0,'0','1') from cdb_objects where owner='PERFSTAT' and status <>'VALID'"
    
    [[metric]]
    context = "DB ARCHIVE LOG MODE"
    metricsdesc = { status="DB archive log status"}
    request = "select decode((log_mode),'ARCHIVELOG','0','1') from v$database"   
    
    [[metric]]
    context = "BLOCK CHANGE TRACKING"
    metricsdesc = { status="Block change tracking status"}
    request = "select decode((status),'ENABLED','0','1') from v$block_change_tracking" 
    